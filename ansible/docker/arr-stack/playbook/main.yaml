---
- name: Deploy and update arr-stack
  hosts: docker
  vars:
    service_name: arr-stack
    base_dir: "/home/mgrsys/docker/{{ service_name }}"
    compose_dir: "{{ base_dir }}/compose"
    sabnzbd_dir: "{{ base_dir }}/sabnzbd"
    repo_dir: "/home/mgrsys/tmp"
    github_repo: "https://github.com/L3odalton/homelab.git"
    docker_network: proxy

  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ compose_dir }}"
        - "{{ sabnzbd_dir }}"

    - name: Ensure docker network(s) exist
      docker_network:
        name: "{{ docker_network }}"
        state: present

    - name: Clone/pull latest configuration from GitHub
      git:
        repo: "{{ github_repo }}"
        dest: "{{ repo_dir }}"
        update: yes
        force: yes
      register: git_status

    - block:
        - name: Copy files using a loop
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            remote_src: yes
          loop:
            - { src: "{{ repo_dir }}/ansible/docker/{{ service_name }}/compose/", dest: "{{ compose_dir }}/" }

        - name: Remove existing .env
          file:
            path: "{{ compose_dir }}/{{ item }}"
            state: absent
          loop:
            - ".env"
          ignore_errors: yes

        - name: Inject Secrets from 1Password
          shell: |
            op inject -i "{{ item.input }}" -o "{{ item.output }}"
            test -f "{{ item.output }}"
          loop:
            - { input: "{{ compose_dir }}/.env.tpl", output: "{{ compose_dir }}/.env", name: ".env" }
          environment:
            OP_SERVICE_ACCOUNT_TOKEN: "{{ op_token }}"
          no_log: yes

      when: git_status.changed

    - name: Deploy/update and restart docker container
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files:
          - docker-compose.yml
        state: present
        pull: policy
        recreate: always

    - name: Read current host_whitelist line
      ansible.builtin.shell: grep '^host_whitelist' /home/mgrsys/docker/arr-stack/sabnzbd/config/sabnzbd.ini || echo "host_whitelist = "
      register: current_whitelist
      changed_when: false

    - name: Set fact for existing whitelist
      ansible.builtin.set_fact:
        existing_whitelist: "{{ current_whitelist.stdout | regex_replace('^host_whitelist\\s*=\\s*', '') }}"

    - name: Update host_whitelist if domains are missing
      ansible.builtin.lineinfile:
        path: /home/mgrsys/docker/arr-stack/sabnzbd/config/sabnzbd.ini
        regexp: '^host_whitelist\s*='
        line: "host_whitelist = {{ existing_whitelist }}{{ ',' if existing_whitelist else '' }}srv-docker.local.darksaber.fyi,sab.darksaber.fyi"
        backrefs: yes
      register: config_update
      when: not current_whitelist.stdout is search('srv-docker.local.darksaber.fyi')

    - name: Restart sabnzbd container
      community.docker.docker_container:
        name: sabnzbd
        restart: true
      when: config_update.changed